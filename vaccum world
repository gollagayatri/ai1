from queue import Queue

# Initializing a queue
queue = Queue()
c = 0
visited = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
mat = [[1, 0, 0, 0], [0, 1, 0, 1], [1, 0, 1, 1]]

queue.put((0, 0))

while not queue.empty():
    i, j = queue.get()

    if i < 0 or j < 0 or i >= len(mat) or j >= len(mat):
        continue

    if visited[i][j]:
        continue

    visited[i][j] = 1

    if mat[i][j] == 0:
        c += 1
    else:
        c += 2
        mat[i][j] = 0

    queue.put((i + 1, j))
    queue.put((i, j + 1))
    queue.put((i - 1, j))
    queue.put((i, j - 1))

print(mat)
print(c - 1)
output:
[[0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 1, 1]]
[[0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 1, 1]]
[[0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 1, 1]]
[[0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 1, 1]]
[[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1]]
[[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1]]
[[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1]]
[[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1]]
[[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]]
12

      dfs


c = 0
visited = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

def dfs(mat, i, j):
    if i < 0 or j < 0 or i >= len(mat) or j >= len(mat[0]):
        return
    if visited[i][j]:
        return
    visited[i][j] = 1
    global c
    if mat[i][j] == 0:
        c += 1
    else:
        c += 2
        mat[i][j] = 0
    print(mat)
    dfs(mat, i + 1, j)
    dfs(mat, i, j + 1)
    dfs(mat, i - 1, j)
    dfs(mat, i, j - 1)

mat = [[1, 0, 0, 0], [0, 1, 0, 1], [1, 0, 1, 1]]
dfs(mat, 0, 0)
print(c - 1)
output:
[[0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 1, 1]]
[[0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 1, 1]]
[[0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 1, 1]]
[[0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 1, 1]]
[[0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 0, 1]]
[[0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 0, 0]]
[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]
[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]
[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]
[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
17
